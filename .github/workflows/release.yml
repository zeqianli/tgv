name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "nightly"
        type: choice
        options:
          - nightly
          - test

jobs:
  build-and-release:
    name: Build and Release TGV
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-musl
            target: x86_64-unknown-linux-musl
            binary_name: tgv
            archive_name: tgv-x86_64-linux-musl.tar.gz
            archive_cmd: tar czvf dist/tgv-x86_64-linux-musl.tar.gz -C target/x86_64-unknown-linux-musl/release tgv
          - os: macos-latest
            platform: macos-arm
            target: aarch64-apple-darwin
            binary_name: tgv
            archive_name: tgv-aarch64-apple-darwin.tar.gz
            archive_cmd: tar czvf dist/tgv-aarch64-apple-darwin.tar.gz -C target/aarch64-apple-darwin/release tgv

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          shared-key: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.platform == 'linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools libssl-dev pkg-config libz-dev

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          mkdir -p dist
          ${{ matrix.archive_cmd }}
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tgv-${{ matrix.platform }}
          path: dist/*

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd release-files && sha256sum * > checksums.txt

      - name: Determine release info
        id: release_info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Workflow dispatch (manual) - use nightly or test release
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            CURRENT_DATE=$(date +'%Y%m%d')
            echo "VERSION=${RELEASE_TYPE}-${CURRENT_DATE}" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=TGV ${RELEASE_TYPE^} Build (${CURRENT_DATE})" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${RELEASE_TYPE}-${CURRENT_DATE}" >> $GITHUB_OUTPUT
          else
            # Tag-based release
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=TGV v${VERSION}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${GITHUB_REF}" >> $GITHUB_OUTPUT
          fi

      - name: Create tag for nightly/test build
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.release_info.outputs.TAG_NAME }}
          git push origin ${{ steps.release_info.outputs.TAG_NAME }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release_info.outputs.RELEASE_NAME }}
          files: release-files/*
          draft: false
          prerelease: ${{ steps.release_info.outputs.IS_PRERELEASE }}
          tag_name: ${{ steps.release_info.outputs.TAG_NAME }}
